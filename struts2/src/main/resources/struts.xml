<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
	<!-- 启动动态方法调用(DMI)模式 -->
    <constant name="struts.enable.DynamicMethodInvocation" value="true" />
    
    <!-- 启动开发者模式 -->
    <constant name="struts.devMode" value="true" />

	<constant name="struts.message.error.content.type.not.allowed" value="上传的文件不受支持"></constant>
	
	<!-- name 属性是必须的，注意namespace的写法，有/ -->
    <package name="default" namespace="/default" extends="struts-default">

		<!-- 在这里定义拦截器、拦截器栈 -->
		<interceptors>
			<!--这个拦截器中有登陆验证的功能,没有登录则跳转到登录页面-->
    		<interceptor name="globalActionInterceptor" class="com.univ.interceptor.GlobalActionInterceptor">
    			<param name="globleName">prefixGloblaNamepostfix</param>
    		</interceptor>
    	
    		<interceptor name="singleActionInterceptor" class="com.univ.interceptor.SingleActionInterceptor"></interceptor>
    		
    		<!-- 定义拦截器栈：将自定义的globalActionInterceptor和默认的拦截器栈defaultStack组装到一起,
    			默认的拦截器（栈）只能有一个，将自定义的放到defaultStack后
    		-->
    		<interceptor-stack name="globalStack">    		
    			<interceptor-ref name="defaultStack"></interceptor-ref>
    			<interceptor-ref name="globalActionInterceptor"></interceptor-ref>
    		</interceptor-stack>
    	</interceptors>


    	<!-- 设置默认的拦截器栈(注意此标签不在interceptors标签下) -->
    	<default-interceptor-ref name="globalStack"></default-interceptor-ref>
    	
    	<!-- 此包下的全局返回视图，global-results标签好像必须放在拦截器的后面 -->
    	<global-results>
    		<!-- 未登陆用户访问action时重定向到登陆页面，注意这里需要采用重定向（转发时地址栏不变，看起来会很奇怪） -->
    		<result type="redirect" name="login">/login.jsp</result>

            <!--给全局异常映射使用-->
            <result name="exception1">/WEB-INF/exception/exception1.jsp</result>
            <result name="exception2">/WEB-INF/exception/exception2.jsp</result>
    	</global-results>

        <!--
            配置全局异常映射
            struts2中的异常映射需要exception拦截器的支持，不过default包中已经默认开启了。
            Struts2中异常映射分为全局和局部的，全局异常映射配置在global-exception-mappings标签下的子标签exception-mapping中，
            局部异常映射配置在action标签下的exception-mapping中。
            exception ：抛出的异常类型；
            result : 异常发生后应该跳转的逻辑视图名；
        -->
        <global-exception-mappings>
            <!--如果抛出的具体异常全局和局部异常中都没有配置，则会被此异常捕获到，和异常捕获的机制一样-->
            <exception-mapping exception="java.lang.Exception" result="exception1"></exception-mapping>
            <exception-mapping exception="java.lang.NullPointerException" result="exception2"></exception-mapping>
        </global-exception-mappings>

        <action name="loginAction" class="com.univ.action.LoginAction">
			<result name="success">/WEB-INF/content/index.jsp</result>
			<!-- 注意，登陆action不能被拦截，否则永远无法登陆，因为此时还没有进行操作的用户是否通过认证 ；
			这里的方法也很有趣，让默认的拦截器拦截此action，而不是上面定义的全局拦截器-->
			<interceptor-ref name="defaultStack"></interceptor-ref>
		</action>
		
        <action name="studentAction" class="com.univ.action.StudentAction">
			<result name="success">/WEB-INF/content/message.jsp</result>
			<result name="input">/WEB-INF/content/input.jsp</result>
			<result name="checkbox">/WEB-INF/student/checkbox.jsp</result>
		</action>
		
		<!-- 配置在action模拟访问servlet相关对象的action -->
		<action name="servletAction" class="com.univ.action.ServletAction">
			<result name="request">/WEB-INF/content/request.jsp</result>
			<result name="session">/WEB-INF/content/session.jsp</result>
			<result name="servletContext">/WEB-INF/content/servletContext.jsp</result>
		</action>
		

		
		<!-- 专门为拦截器的演示配置一个拦截器，不污染其他代码 -->
		<action name="interceptorAction" class="com.univ.action.IntercepterAction">
			<result>/WEB-INF/content/interceptor.jsp</result>
			
			<!-- 设置拦截此action的拦截器 -->
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="singleActionInterceptor"></interceptor-ref>
		</action>
		
		<!--  -->
		<action name="fileUpload" class="com.univ.action.FileUploadAction">
			<!-- 用以存放上传文件的存放路径 -->
			<param name="savePath">d:\\upload</param>
			<result>/WEB-INF/content/fileUpload_success.jsp</result>
			<result name="input">/fileUpload.jsp</result>
			<interceptor-ref name="fileUpload">
				<!-- 设置允许上传的文件类型 -->
				<param name="allowedTypes">image/png,image/gif,image/jpeg</param>
				<!-- 设置允许上传的文件大小，单位是字节 -->
				<param name="maximumSize">20000</param>
			</interceptor-ref>
			<!-- 默认的拦截器必须放在下面 -->
			<interceptor-ref name="defaultStack"></interceptor-ref>
		</action>	
		
		<!-- 文件下载action -->
		<action name="FileDownload" class="com.univ.action.FileDownload">
		<!--处理stream返回类型的类是 org.apache.struts2.dispatcher.StreamResult -->
		  <result name="success" type="stream">  
			<!-- 下面的参数应该传给StreamResult的相应属性，下面的参数名和StreamResult中的属性一一对应 -->
			  <param name="contentType">text/plain</param>  
			  <!-- 默认为 inline(在线打开)，设置为 attachment 将会告诉浏览器下载该文件，filename对应于action中的fileName属性，指定下载文件保存时的文件名，若未指定将会是以浏览的页面名作为文件名（如以 download.action 作为文件名），这里使用的是动态文件名，${fileName}, 它将通过 Action 的 getFileName() 获得文件名 ，如果文件名为中文，则需要转码-->   
			  <param name="contentDisposition">attachment;fileName="${fileName}"</param>  
			  <!-- 指示 StreamResult 通过 inputName 属性值的 getter方法,意味着你的 Action要有这个方法 （如这里的getDownloadFile） -->
			  <param name="inputName">downloadFile</param>  
			  <param name="bufferSize">1024</param>  
		  </result>  
		</action> 	
		
		<action name="jxlAction" class="com.univ.action.JxlAction">
			<result name="success">/WEB-INF/content/jxl.jsp</result>
		</action>

        <action name="exceptionAction" class="com.univ.action.ExceptionAction">
            <!--配置局部异常映射-->
            <exception-mapping exception="java.sql.SQLException" result="exception3"></exception-mapping>
            <result name="exception3">/WEB-INF/exception/exception3.jsp</result>
        </action>
		
		
    </package>

    <!--需要使用到json的action放在这里，继承自json-default(本身继承自struts-default)-->
    <package name="json" namespace="/json" extends="json-default" >
		<action name="ajaxAction" class="com.univ.action.AjaxAction">
            <!--指定返回类型为json-->
			<result type="json" name="jsonResult2">
                <!--此时Action的属性只有jsonMap被序列化成json返回到前台，属性stu不会-->
                <param name="root">jsonMap</param>
            </result>

            <result type="json" name="jsonResult3">
                <!--不使用root指定则所有的属性都将被序列化成json并返回给前台-->
            </result>

            <result type="json" name="jsonResult4">
                <!--用root指定只有jsonMap将会序列化-->
                <param name="root">jsonMap</param>
                <!--指定只有jsonMap的name和address属性将被序列化，其它的属性不会被序列化-->
                <param name="includeProperties">name,address</param>
            </result>

            <result type="json" name="jsonResult5">
                <!--用root指定stu将被序列化成json并返回给前台-->
                <param name="root">stu</param>
                <!--stu中的属性值为null的不被序列化-->
                <!--<param name="excludeNullProperties">true</param>-->
            </result>

            <!--处理非ajax请求-->
            <result name="normal1">/resources/easyui/jquery.min.js</result>
            <result name="normal2">/resources/easyui/jquery.min.js</result>

		</action>

    </package>
</struts>
